irc            = require \irc
_              = require \underscore
redis          = require \redis
{EventEmitter} = require \events
{inspect}      = require \util

opts = require './opts'

Array::remove = (item) -> @splice @indexOf(item), 1
Array::insert = (i, v) -> @splice i, 0, v
Array::swap   = (x, y) -> @[y] = (@[x] += @[y] -= @[x]) - @[y]
String::left  =        -> @slice 0, @indexOf ' '
String::right =        -> @slice @indexOf(' ') + 1

ops = []

addop = (nick) -> ops.push nick unless isop nick
delop = (nick) -> ops.remove nick
isop  = (nick) -> _.include ops, nick

bot = new irc.Client opts.server, opts.nick, debug: true
cmds = new EventEmitter
brain = redis.createClient()

# delay joining channels so that it can join channels that require it to be
# registered or identified
setTimeout ->
  bot.join opts.main
  bot.join opts.ops
, 5000

# this is all to keep track of ops
bot.on \names, (channel, nicks) ->
  if channel is opts.main
    for nick, mode in nicks
      addop nick if _.include <[ % @ & ~ ]>, mode
bot.on \nick, (oldnick, newnick) ->
  if isop oldnick
    delop oldnick
    addop newnick
bot.on \part, (channel, nick) -> delop nick if channel is opts.main
bot.on \+mode, (channel, setter, mode, arg) ->
  addop arg if channel is opts.main and _.include <[ h o a q ]>, mode
bot.on \-mode, (channel, setter, mode, arg) ->
  delop arg if channel is opts.main and _.include <[ h o a q ]>, mode

bot.on \registered, -> bot.say \NickServ, "IDENTIFY #{opts.pass}"
bot.on \message, (nick, to, text, message) ->
  # this magical regexp splits "!topic hi" up into "topic", "hi", and
  # "!showtopic" into "showtopic" and null.
  if isop nick and m = text.match /^!([^ ]+)(?: (.*))?$/
    cmds.emit m[1].toLowerCase(), m[2], to
bot.on \error, -> console.log "ERROR: #{inspect(it)}"

setInterval (-> brain.save redis.print), 300000

_.each opts.modules, (mod) -> require("./#mod")(bot, cmds, opts, brain, isop)
